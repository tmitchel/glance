// Code generated by oto; DO NOT EDIT.

'use strict';

 
export class CreateService {
	
	async card(createCardRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		createCardRequest = createCardRequest || {}
		const response = await fetch('/oto/CreateService.Card', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(createCardRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async claimCard(claimRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		claimRequest = claimRequest || {}
		const response = await fetch('/oto/CreateService.ClaimCard', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(claimRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async updateStatus(newStatusRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		newStatusRequest = newStatusRequest || {}
		const response = await fetch('/oto/CreateService.UpdateStatus', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(newStatusRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async user(createUserRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		createUserRequest = createUserRequest || {}
		const response = await fetch('/oto/CreateService.User', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(createUserRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}
 
export class GetService {
	
	async card(cardRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		cardRequest = cardRequest || {}
		const response = await fetch('/oto/GetService.Card', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(cardRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async cards(emptyRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		emptyRequest = emptyRequest || {}
		const response = await fetch('/oto/GetService.Cards', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(emptyRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async homePage(userRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		userRequest = userRequest || {}
		const response = await fetch('/oto/GetService.HomePage', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(userRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async user(userRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		userRequest = userRequest || {}
		const response = await fetch('/oto/GetService.User', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(userRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async users(emptyRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		emptyRequest = emptyRequest || {}
		const response = await fetch('/oto/GetService.Users', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(emptyRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}

