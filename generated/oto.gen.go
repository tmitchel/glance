// Code generated by oto; DO NOT EDIT.

package generated

import (
	"context"
	"log"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"

	uuid "github.com/google/uuid"
)

type CreateService interface {
	Card(context.Context, CreateCardRequest) (*CardResponse, error)
	ClaimCard(context.Context, ClaimRequest) (*CardResponse, error)
	UpdateStatus(context.Context, NewStatusRequest) (*CardResponse, error)
	User(context.Context, CreateUserRequest) (*UserResponse, error)
}

type GetService interface {
	Card(context.Context, CardRequest) (*CardResponse, error)
	Cards(context.Context, EmptyRequest) (*CardsResponse, error)
	HomePage(context.Context, UserRequest) (*HomePageResponse, error)
	User(context.Context, UserRequest) (*UserResponse, error)
	Users(context.Context, EmptyRequest) (*UsersResponse, error)
}

type createServiceServer struct {
	server        *otohttp.Server
	createService CreateService
}

func RegisterCreateService(server *otohttp.Server, createService CreateService) {
	handler := &createServiceServer{
		server:        server,
		createService: createService,
	}
	server.Register("CreateService", "Card", handler.handleCard)
	server.Register("CreateService", "ClaimCard", handler.handleClaimCard)
	server.Register("CreateService", "UpdateStatus", handler.handleUpdateStatus)
	server.Register("CreateService", "User", handler.handleUser)
}

func (s *createServiceServer) handleCard(w http.ResponseWriter, r *http.Request) {
	var request CreateCardRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.createService.Card(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *createServiceServer) handleClaimCard(w http.ResponseWriter, r *http.Request) {
	var request ClaimRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.createService.ClaimCard(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *createServiceServer) handleUpdateStatus(w http.ResponseWriter, r *http.Request) {
	var request NewStatusRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.createService.UpdateStatus(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *createServiceServer) handleUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.createService.User(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type getServiceServer struct {
	server     *otohttp.Server
	getService GetService
}

func RegisterGetService(server *otohttp.Server, getService GetService) {
	handler := &getServiceServer{
		server:     server,
		getService: getService,
	}
	server.Register("GetService", "Card", handler.handleCard)
	server.Register("GetService", "Cards", handler.handleCards)
	server.Register("GetService", "HomePage", handler.handleHomePage)
	server.Register("GetService", "User", handler.handleUser)
	server.Register("GetService", "Users", handler.handleUsers)
}

func (s *getServiceServer) handleCard(w http.ResponseWriter, r *http.Request) {
	var request CardRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.getService.Card(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *getServiceServer) handleCards(w http.ResponseWriter, r *http.Request) {
	var request EmptyRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.getService.Cards(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *getServiceServer) handleHomePage(w http.ResponseWriter, r *http.Request) {
	var request UserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.getService.HomePage(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *getServiceServer) handleUser(w http.ResponseWriter, r *http.Request) {
	var request UserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.getService.User(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *getServiceServer) handleUsers(w http.ResponseWriter, r *http.Request) {
	var request EmptyRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.getService.Users(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type CardRequest struct {
	ID string `json:"id"`
}

type CardResponse struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	Status    int       `json:"status"`
	Creator   uuid.UUID `json:"creator"`
	Claimed   bool      `json:"claimed"`
	CreatedAt string    `json:"createdAt"`
	Error     string    `json:"error,omitempty"`
}

type CardsResponse struct {
	Cards []CardResponse `json:"cards"`
	Error string         `json:"error,omitempty"`
}

type ClaimRequest struct {
	UserID string `json:"userID"`
	CardID string `json:"cardID"`
}

type CreateCardRequest struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Creator string `json:"creator"`
}

type NewStatusRequest struct {
	Status int    `json:"status"`
	Card   string `json:"card"`
	User   string `json:"user"`
}

type CreateUserRequest struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UserResponse struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
	Error string    `json:"error,omitempty"`
}

type EmptyRequest struct {
}

type UserRequest struct {
	Email string `json:"email"`
}

type HomePageResponse struct {
	User  *UserResponse `json:"user"`
	Pairs []struct {
		User *UserResponse
		Card *CardResponse
	} `json:"pairs"`
	Error string `json:"error,omitempty"`
}

type UsersResponse struct {
	Users []UserResponse `json:"users"`
	Error string         `json:"error,omitempty"`
}
